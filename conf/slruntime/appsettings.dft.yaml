# internal, developer-facing application settings
# ** a *normal* user will normally not edit this file **

dynaconf_merge: true # merge with config in settings.yaml (required)

# launcher config; what starts modules
# add launchers (a Launcher-derived class) here; launcher key is the create request filetype (WA, PY, ...)
launcher:
  # space-separated list e.g.: python:python3 wasm:wasi_preview_1;
  # union of apis supported by all configured launchers below
  apis: python:python3
  PY: # launcher key
    class: launcher.python_launcher.PythonLauncher # instanciate a Launcher-derived class from: module.submodule.Class
    # install requirements; force stdout/stderr to be unbuffered; string must include {py_filename} to be started
    #cmd: '[ -f "requirements.txt" ] && install -Ur requirements.txt; python3 -u {py_filename}'
    cmd: '/entrypoint.sh'
    docker: # this launcher uses docker with these options
      # use this image and workdir
      image: slframework/slruntime-python-runner-repo-head
      workdir: /usr/src/app
      monitor_interval_secs: 0.5

      run_opts: # run options
        auto_remove: True
        stdin_open: True
        detach: True
        #cap_drop: all
        # qos options below: 25% of 1 cpu to each container
        cpu_count: 1
        cpu_period: 100000
        cpu_quota: 25000

  WA: # launcher key
    class: launcher.wasm_launcher.WasmLauncher # instanciate a Launcher-derived class from: module.submodule.Class
    # launcher-specific (launcher.wasm_launcher) arguments
    image: python

runtime:
  runtime_type: containerized-modules
  apis: "@format {this.launcher.apis}" #apis from launcher config

# Note: 
# - variables inside single brackets ({}) will be replaced by settings values 
# - variables inside double brackets ({{}}) are only known at runtime. 
#   they will be transformed to single brackets and left undecoded 
#   these can be decoded with <str>.format(<var1>=<val1>, <var2>=<val2>)
topics:
  # runtime registration, keepalives, errors
  runtimes: "@format {this.runtime.realm}/g/{this.runtime.namespace}/p/{this.runtime.uuid}"
  # module requests (subscribe only)
  modules: "@format {this.runtime.realm}/s/+/+/p/+/+"
  # module io: stdin/out/err (error includes runtime-related module errors)
  # namespaced_scene and module_uuid are replaced at runtime
  mio: "@format {this.runtime.realm}/s/{{namespaced_scene}}/p/{this.runtime.uuid}/{{module_uuid}}"

# where/how we keep program files
repository:
  class: program_files.filestore_builder.FileStoreBuilder # instanciate a Repo bouilder class from: module.submodule.Class
