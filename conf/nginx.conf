# this is required to proxy Grafana Live WebSocket connections.
map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {
  listen 80;

  # File Caching. Static files will never change w/o nginx restart.
  sendfile on;
  sendfile_max_chunk 512k;
  open_file_cache          max=250 inactive=60m;
  open_file_cache_valid    60m;
  open_file_cache_min_uses 1;
  open_file_cache_errors   off;

  # Security config
  server_tokens off;
  add_header X-Frame-Options "DENY" always;

  # Compression
  gzip on;
  gzip_vary on;
  gzip_disable "msie6";
  gzip_types    text/plain application/javascript text/xml text/css application/json font/woff2;

  set $cors_origin "";
  set $cors_cred   "";
  set $cors_header "";
  set $cors_method "";

  # If's not evil not inside a location block right?
  if ($http_origin ~* ('^https?://*.\.com'))) {
    set $cors_origin $http_origin;
    set $cors_cred   true;
    set $cors_header $http_access_control_request_headers;
    set $cors_method "GET, OPTIONS";
  }

  location ^~ /api/ {
    resolver 127.0.0.11;
    add_header Access-Control-Allow-Origin      $cors_origin always;
    add_header Access-Control-Allow-Credentials $cors_cred always;
    add_header Access-Control-Allow-Headers     $cors_header always;
    add_header Access-Control-Allow-Methods     $cors_method always;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";    
    proxy_pass http://orchestrator:8000/;
  }

   location /grafana/ {
    resolver 127.0.0.11;
    add_header Access-Control-Allow-Origin      $cors_origin always;
    add_header Access-Control-Allow-Credentials $cors_cred always;
    add_header Access-Control-Allow-Headers     $cors_header always;
    add_header Access-Control-Allow-Methods     $cors_method always;
    rewrite  ^/grafana/(.*)  /$1 break;
    proxy_pass http://grafana:3000;
  }

  # Proxy Grafana Live WebSocket connections.
  location /grafana/api/live/ {
    resolver 127.0.0.11;
    add_header Access-Control-Allow-Origin      $cors_origin always;
    add_header Access-Control-Allow-Credentials $cors_cred always;
    add_header Access-Control-Allow-Headers     $cors_header always;
    add_header Access-Control-Allow-Methods     $cors_method always;
    rewrite  ^/grafana/(.*)  /$1 break;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_pass http://grafana:3000;
  }

  location /nginx-health {
    access_log off;
    return 200 "healthy\n";
  }

  location / {
    root /app;
    index index.html index.html;
    try_files $uri $uri/ /index.html;

    # Never cache index
    add_header X-Frame-Options "DENY" always;
    add_header Cache-Control "no-store, no-cache, must-revalidate";
    # Never expire static files, which should be rev'd
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|json|xml|svg|woff|woff2|ttf|eot)$ {
      expires 1y;
      add_header Cache-Control "public, immutable";
    }
  }
}
